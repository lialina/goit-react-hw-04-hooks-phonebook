{"version":3,"sources":["components/Container/Container.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Container/Container.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","s","container","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","reset","form","preventDefault","label","htmlFor","type","onChange","id","pattern","title","required","button","Filter","ContactList","contacts","onDeleteContact","list","map","item","onClick","App","initialContacts","setContacts","filter","setFilter","localStorageContacts","JSON","parse","localStorage","getItem","useEffect","window","setItem","stringify","getVisibleContacts","useMemo","normalizedFilter","toLowerCase","contact","includes","find","presentContact","alert","contactId","filteredCont","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cc5fc70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2Z752\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__aHh74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__uEKlN\",\"item\":\"ContactList_item__1dErc\",\"name\":\"ContactList_name__2oK1h\",\"number\":\"ContactList_number__1VYyn\",\"button\":\"ContactList_button__1M199\"};","import PropTypes from \"prop-types\";\nimport s from \"./Container.module.css\";\n\nfunction Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n\nexport default Container;\n","import { useState } from \"react\";\nimport shortid from \"shortid\";\nimport s from \"./ContactForm.module.css\";\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChange = (event) => {\n    if (event.currentTarget.name === \"name\") {\n      setName(event.currentTarget.value);\n    };\n    \n    if (event.currentTarget.name === \"number\") {\n      setNumber(event.currentTarget.value);\n    };\n  };\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    onSubmit({\n      name,\n      number,\n    });\n\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label} htmlFor={nameInputId}>\n          Name{\" \"}\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label} htmlFor={numberInputId}>\n          Number{\" \"}\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={numberInputId}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n}\n\nexport default ContactForm;\n\n// class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChange = (event) => {\n//     const { name, value } = event.currentTarget;\n\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     this.props.onSubmit({\n//       name: this.state.name,\n//       number: this.state.number,\n//     });\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: \"\",\n//       number: \"\",\n//     });\n//   };\n\n//   render() {\n    // return (\n    //   <form className={s.form} onSubmit={this.handleSubmit}>\n    //     <label className={s.label} htmlFor={this.nameInputId}>\n    //       Name{\" \"}\n    //       <input\n    //         type=\"text\"\n    //         name=\"name\"\n    //         value={this.state.name}\n    //         onChange={this.handleChange}\n    //         id={this.nameInputId}\n    //         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n    //         required\n    //       />\n    //     </label>\n    //     <label className={s.label} htmlFor={this.numberInputId}>\n    //       Number{\" \"}\n    //       <input\n    //         type=\"tel\"\n    //         name=\"number\"\n    //         value={this.state.number}\n    //         onChange={this.handleChange}\n    //         id={this.numberInputId}\n    //         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n    //         required\n    //       />\n    //     </label>\n\n    //     <button className={s.button} type=\"submit\">\n    //       Add contact\n    //     </button>\n    //   </form>\n    // );\n//   }\n// }\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport s from \"./ContactList.module.css\";\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.name}>{name}</p>\n          <p className={s.number}>{number}</p>\n          <button className={s.button} onClick={() => onDeleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useState, useEffect, useMemo } from \"react\";\nimport shortid from \"shortid\";\nimport \"./App.css\";\nimport Container from \"components/Container/Container\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport initialContacts from \"contacts.json\";\n\nfunction App() {\n  const [contacts, setContacts] = useState(initialContacts);\n  const [filter, setFilter] = useState(\"\");\n\n  const localStorageContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n\n  useEffect(() => {\n    if (localStorageContacts) {\n      setContacts(localStorageContacts);\n      return;\n    } \n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contacts.find((presentContact) => presentContact.name === contact.name)) {\n      alert(`${contact.name} is already in contacts.`);\n      return;\n    }\n\n    setContacts([contact, ...contacts]);\n  };\n\n  const deleteContact = (contactId) => {\n    const filteredCont = contacts.filter((contact) => contact.id !== contactId);\n    setContacts(filteredCont);\n  };\n\n  const changeFilter = (event) => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getVisibleContacts = useMemo(() => {\n    const normalizedFilter = filter.toLowerCase();\n    \n    let visibleContacts = (contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)));\n    return visibleContacts;\n  }, [contacts, filter]);\n\n  return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={changeFilter} />\n\n        <ContactList\n          contacts={getVisibleContacts}\n          onDeleteContact={deleteContact}\n        />\n      </Container>\n    );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: initialContacts,\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     console.log(\"App componentDidMount\");\n\n//     const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n//     console.log(parsedContacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log(\"Обновилось поле contacts, записываю contacts  в хранилище\");\n\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log(\"App componentDidUpdate\");\n\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     this.checkisContactAlreadyPresent(contact);\n//   };\n\n//   checkisContactAlreadyPresent = (contact) => {\n//     if (\n//       this.state.contacts.find(\n//         (presentContact) => presentContact.name === contact.name\n//       )\n//     ) {\n//       alert(`${contact.name} is already in contacts.`);\n//       return;\n//     }\n\n//     this.setState(({ contacts }) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   };\n\n//   deleteContact = (contactId) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== contactId\n//       ),\n//     }));\n//   };\n\n//   changeFilter = (event) => {\n//     this.setState({ filter: event.currentTarget.value });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     );\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n\n//     const visibleContacts = this.getVisibleContacts();\n\n//     return (\n//       <Container>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={this.addContact} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={filter} onChange={this.changeFilter} />\n\n//         <ContactList\n//           contacts={visibleContacts}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </Container>\n//     );\n//   }\n// }\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__aod3k\",\"label\":\"ContactForm_label__1osID\",\"button\":\"ContactForm_button__2KNxe\"};"],"sourceRoot":""}